{"version":3,"sources":["App.js","text.js","index.js"],"names":["App","md","Remarkable","useState","value","setValue","className","id","onChange","target","dangerouslySetInnerHTML","__html","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"4NAwCeA,MAnCf,WACE,IAAIC,EAAK,IAAIC,IACb,EAA0BC,mBCPjB,0pCDOT,mBAAOC,EAAP,KAAcC,EAAd,KAUA,OACE,sBAAKC,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,mBAAGC,GAAG,eAAeD,UAAU,QAA/B,oBAGA,0BAAUC,GAAG,SAASC,SAdP,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACtBJ,EAASI,EAAOL,QAakCA,MAAOA,OAEvD,sBAAKE,UAAU,UAAf,UACE,mBAAGC,GAAG,gBAAgBD,UAAU,QAAhC,qBAGA,qBAAKC,GAAG,UAAUG,wBAff,CAAEC,OAAQV,EAAGW,OAAOR,aEV/BS,IAASD,OACP,cAAC,IAAME,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.bad2c5b5.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { Remarkable } from \"remarkable\";\nimport text from \"./text\";\nimport \"./App.css\";\n\nfunction App() {\n  let md = new Remarkable();\n  const [value, setValue] = useState(text);\n\n  const handleChange = ({ target }) => {\n    setValue(target.value);\n  };\n\n  function getRawMarkup() {\n    return { __html: md.render(value) };\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"editor\">\n        <p id=\"editor-title\" className=\"fontt\">\n          Editor\n        </p>\n        <textarea id=\"editor\" onChange={handleChange} value={value} />\n      </div>\n      <div className=\"preview\">\n        <p id=\"preview-title\" className=\"fontt\">\n          Preview\n        </p>\n        <div id=\"preview\" dangerouslySetInnerHTML={getRawMarkup()} />\n      </div>\n      {/* <h3>Input</h3>\n      <label htmlFor=\"markdown-content\">Enter some markdown</label>\n      <textarea id=\"editor\" onChange={handleChange} defaultValue={value} />\n      <h3>Output</h3>\n      <div className=\"content\" dangerouslySetInnerHTML={getRawMarkup()} /> */}\n    </div>\n  );\n}\n\nexport default App;\n","const first = `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n\r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n\r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.org), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | -------------\r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbered lists too.\r\n1. Use just 1s if you want!\r\n1. And last but not least, let's not forget embedded images:\r\n\r\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)\r\n`;\r\n\r\nexport default first;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}